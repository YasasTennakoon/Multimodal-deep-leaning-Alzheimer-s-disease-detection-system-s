# -*- coding: utf-8 -*-
"""TextualClassification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/144B0yqdfrpjqDDqJEE4tIzgmDe_Sn7CC
"""

# Textual classification part
#/content/drive/Othercomputers/My Laptop (1)/My 4th year until my lap is fixed/4TH YEAR-20231030T173451Z-001/4TH YEAR/FYP/Early detection of the Alzehimz deseases/Code Implementation/Early Alzehimz disease detection system/archive (11)/oasis_longitudinal.csv
# This Python 3 environment comes with many helpful analytics libraries installed# libraries for data wrangling
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder

# Data pre processing
data = pd.read_csv('/content/drive/Othercomputers/My Laptop (1)/My 4th year until my lap is fixed/4TH YEAR-20231030T173451Z-001/4TH YEAR/FYP/Early detection of the Alzehimz deseases/Code Implementation/Early Alzehimz disease detection system/archive (11)/oasis_cross-sectional.csv')
data.head(10)

# dropping irrelevant columns
data=data.drop(['ID','Hand', 'Delay', 'Educ'],axis=1)

data.head()

# checking missing values in each column
data.isna().sum()

# Fill missing values for 'Educ', 'SES', and 'MMSE' with their respective medians
for column in ['SES', 'MMSE']:
    data[column].fillna(data[column].median(), inplace=True)

data.isna().sum()

# Ensure no missing values in 'CDR' before mapping
data.dropna(subset=['CDR'], inplace=True)

# Define a function to map CDR values to dementia stages. The dataset manupulation is conducted with refrence for the dataste description.
def map_cdr_to_dementia_stage(cdr):
    if cdr == 0.0:
        return 'No Dementia'
    elif cdr == 0.5:
        return 'Very Mild AD'
    elif cdr == 1.0:
        return 'Mild AD'
    elif cdr == 2.0:
        return 'Moderate AD'
    else:
        return 'Unknown Dementia Stage'

# Map 'CDR' to dementia stage
data['Dementia_Stage'] = data['CDR'].apply(map_cdr_to_dementia_stage)

data.head(100)

# Encode 'M/F' column
label_encoder = LabelEncoder()
data['M/F'] = label_encoder.fit_transform(data['M/F'])

# Split the data into features and target
X = data.drop(['CDR', 'Dementia_Stage'], axis=1)
y = data['Dementia_Stage']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the RandomForestClassifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

# Predicting for a new patient
new_patient_data = {
    'M/F': [1],  # Example: 0 for female, 1 for male
    'Age': [70],
    'SES': [2],
    'MMSE': [28],
    'eTIV': [1500],
    'nWBV': [0.7],
    'ASF': [1.2],
}
new_patient_df = pd.DataFrame(new_patient_data)
predicted_stage = model.predict(new_patient_df)
print(f'Predicted Alzehimz Stage: {predicted_stage[0]}')

# Predicting for a new patient
new_patient_data = {
    'M/F': [1],  # Example: 0 for female, 1 for male
    'Age': [78],
    'SES': [2],
    'MMSE': [68],
    'eTIV': [6500],
    'nWBV': [0.1],
    'ASF': [1.7],
}
new_patient_df = pd.DataFrame(new_patient_data)
predicted_stage = model.predict(new_patient_df)
print(f'Predicted Alzehimz Stage: {predicted_stage[0]}')